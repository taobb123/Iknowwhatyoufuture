import { useState, useEffect } from 'react';
import { games } from '../data/gamesData';
import { 
  X,
  Maximize2,
  Minimize2
} from 'lucide-react';



function Home() {
  const [selectedGame, setSelectedGame] = useState<number | null>(null);
  const [isFullscreen, setIsFullscreen] = useState(false);

  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
    document.addEventListener('mozfullscreenchange', handleFullscreenChange);
    document.addEventListener('MSFullscreenChange', handleFullscreenChange);

    return () => {
      document.removeEventListener('fullscreenchange', handleFullscreenChange);
      document.removeEventListener('webkitfullscreenchange', handleFullscreenChange);
      document.removeEventListener('mozfullscreenchange', handleFullscreenChange);
      document.removeEventListener('MSFullscreenChange', handleFullscreenChange);
    };
  }, []);

  const openGame = (gameId: number) => {
    setSelectedGame(gameId);
  };

  const closeGame = () => {
    setSelectedGame(null);
  };

  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen();
    } else {
      document.exitFullscreen();
    }
  };

  const getCategoryColor = (category?: string) => {
    const colors: { [key: string]: string } = {
      racing: 'bg-red-500',
      action: 'bg-orange-500',
      adventure: 'bg-green-500',
      puzzle: 'bg-blue-500',
      shooting: 'bg-purple-500',
      rpg: 'bg-pink-500',
      arcade: 'bg-yellow-500',
      other: 'bg-gray-500'
    };
    return colors[category || 'other'] || 'bg-gray-500';
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white">

      <div className="container mx-auto px-4 py-8 pt-24">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-yellow-400 mb-4">游戏中心</h1>
          <p className="text-gray-300 text-lg">发现最热门的在线游戏，立即开始你的游戏之旅！</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {games.map((game) => (
            <div
              key={game.id}
              className="bg-gray-800 rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 cursor-pointer"
              onClick={() => openGame(game.id)}
            >
              <div className="relative">
                <img
                  src={game.image}
                  alt={game.title}
                  className="w-full h-48 object-cover"
                  onError={(e) => {
                    const target = e.target as HTMLImageElement;
                    target.src = '/racing-horizon.jpg';
                  }}
                />

                <div className={`absolute top-2 left-2 px-2 py-1 rounded text-xs font-semibold ${getCategoryColor(game.category)}`}>
                  {game.category || '其他'}
                </div>
              </div>

              <div className="p-4">
                <h3 className="text-lg font-semibold mb-2 text-white">{game.title}</h3>
                <p className="text-gray-300 text-sm mb-3 line-clamp-2">{game.description}</p>

                <div className="flex flex-wrap gap-1 mb-3">
                  {game.features.map((feature, index) => (
                    <span
                      key={index}
                      className="bg-gray-700 text-gray-300 px-2 py-1 rounded text-xs"
                    >
                      {feature}
                    </span>
                  ))}
                </div>

                <div className="flex justify-between text-sm text-gray-400 mb-3">
                  <span>{game.playCount} 次游玩</span>
                  <span>{game.likes} 点赞</span>
                  <span>{game.duration}</span>
                </div>

                <div className="text-xs text-gray-500">
                  <div className="flex flex-wrap gap-2">
                    {game.controls.slice(0, 2).map((control, index) => (
                      <span key={index}>
                        <span className="font-semibold">{control.key}</span>: {control.action}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* 游戏弹窗 */}
      {selectedGame && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
          <div className="bg-gray-800 rounded-lg w-full h-full max-w-6xl max-h-[90vh] flex flex-col">
            <div className="flex justify-between items-center p-4 border-b border-gray-700">
              <h2 className="text-xl font-semibold text-white">
                {games.find(g => g.id === selectedGame)?.title}
              </h2>
              <div className="flex gap-2">
                <button
                  onClick={toggleFullscreen}
                  className="p-2 bg-gray-700 hover:bg-gray-600 rounded text-white transition-colors"
                  title={isFullscreen ? "退出全屏" : "全屏"}
                >
                  {isFullscreen ? <Minimize2 size={20} /> : <Maximize2 size={20} />}
                </button>
                <button
                  onClick={closeGame}
                  className="p-2 bg-gray-700 hover:bg-gray-600 rounded text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>
            </div>

            <div className="flex-1 p-4">
              <div className="w-full h-full rounded-lg overflow-hidden">
                <div
                  dangerouslySetInnerHTML={{
                    __html: games.find(g => g.id === selectedGame)?.iframe || ''
                  }}
                />
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default Home;